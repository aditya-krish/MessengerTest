package publisher;

import DDS.*;
import OpenDDS.DCPS.*;
import org.omg.CORBA.StringSeqHolder;
import Messenger.*;

public class TestSubscriber {
	public static boolean checkReliable(String[] args) {
		for (int i = 0; i < args.length; i++) {
			if (args[i].equals("-r")) 
				return true;
		}
		return false;
	}
	
	public static void main(String[] args) throws Exception {
		System.out.println("Start Subscriber.");
		boolean reliable = checkReliable(args);
		
		DomainParticipantFactory dpf = 
				TheParticipantFactory.WithArgs(new StringSeqHolder(args));
		if (dpf == null) {
			System.err.println("ERROR: Domain Participant Factory not found");
			return;
		}
        final int DOMAIN_ID = 42;
		DomainParticipant dp = 
				dpf.create_participant(DOMAIN_ID, 
						PARTICIPANT_QOS_DEFAULT.get(), 
						null, 
						DEFAULT_STATUS_MASK.value);
		if (dp == null) {
			System.err.println("ERROR: Domain Participant creation failed.");
			return;
		}
		
		MessageTypeSupportImpl servant = new MessageTypeSupportImpl();
		if (servant.register_type(dp, "") != RETCODE_OK.value) {
			System.err.println("ERROR: register_type failed.");
			return;
		}
		Topic top = dp.create_topic("Movie Discussion List", 
				servant.get_type_name(), 
				TOPIC_QOS_DEFAULT.get(), 
				null, 
				DEFAULT_STATUS_MASK.value);
		if (top == null) {
			System.err.println("ERROR: Topic creation failed");
			return;
		}
		
 //------------------------------- creating a subscriber -------------------------
		
		Subscriber sub = dp.create_subscriber(SUBSCRIBER_QOS_DEFAULT.get(),
				null, 
				DEFAULT_STATUS_MASK.value);
		if (sub == null) {
			System.err.println("ERROR: Subscriber creation failed");
			return;
		}
 //------------------------------- transport configuration -------------------------------
        
        // using default configuration options (do nothing)
        
        DataReaderQos dr_qos = new DataReaderQos();
        dr_qos.durability = new DurabilityQosPolicy();
        dr_qos.durability.kind = DurabilityQosPolicyKind.from_int(0);
        
        dr_qos.deadline = new DeadlineQosPolicy();
        dr_qos.deadline.period = new Duration_t();
        dr_qos.latency_budget = new LatencyBudgetQosPolicy();
        dr_qos.latency_budget.duration = new Duration_t();
        dr_qos.liveliness = new LivelinessQosPolicy();
        dr_qos.liveliness.kind = LivelinessQosPolicyKind.from_int(0);
        dr_qos.liveliness.lease_duration = new Duration_t();
        dr_qos.reliability = new ReliabilityQosPolicy();
        dr_qos.reliability.kind = ReliabilityQosPolicyKind.from_int(0);
        dr_qos.reliability.max_blocking_time = new Duration_t();
        dr_qos.destination_order = new DestinationOrderQosPolicy();
        dr_qos.destination_order.kind = DestinationOrderQosPolicyKind.from_int(0);
        dr_qos.history = new HistoryQosPolicy();
        dr_qos.history.kind = HistoryQosPolicyKind.from_int(0);
        dr_qos.resource_limits = new ResourceLimitsQosPolicy();
        
        dr_qos.user_data = new UserDataQosPolicy();
        dr_qos.user_data.value = new byte[0];
        dr_qos.ownership = new OwnershipQosPolicy();
        dr_qos.ownership.kind = OwnershipQosPolicyKind.from_int(0);
        dr_qos.time_based_filter = new TimeBasedFilterQosPolicy();
        dr_qos.time_based_filter.minimum_separation = new Duration_t();
        dr_qos.reader_data_lifecycle = new ReaderDataLifecycleQosPolicy();
        dr_qos.reader_data_lifecycle.autopurge_nowriter_samples_delay = new Duration_t();
        dr_qos.reader_data_lifecycle.autopurge_disposed_samples_delay = new Duration_t();
        
        DataReaderQosHolder qosh = new DataReaderQosHolder(dr_qos);
        sub.get_default_datareader_qos(qosh);
        qosh.value.history.kind = HistoryQosPolicyKind.KEEP_ALL_HISTORY_QOS;
        if (reliable) {
        	qosh.value.reliability.kind = ReliabilityQosPolicyKind.RELIABLE_RELIABILITY_QOS;
        }
	}
}
